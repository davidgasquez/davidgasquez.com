---
import Base from "./Base.astro";
import { getCollection } from "astro:content";

export interface Props {
  currentSlug?: string;
}

const { currentSlug } = Astro.props;

// Get all handbook entries for sidebar navigation
const handbookEntries = await getCollection("handbook");

// Function to extract the first header from markdown content
function extractFirstHeader(content: string): string | null {
  const headerMatch = content.match(/^#\s+(.+)$/m);
  return headerMatch ? headerMatch[1].trim() : null;
}

// Sort entries alphabetically by title or filename
const sortedEntries = handbookEntries
  .filter(entry => entry.id !== "README") // Exclude README
  .map((entry) => {
    const title = entry.data.title || 
                  extractFirstHeader(entry.body || "") || 
                  entry.id.replace(/\.md$/, "").replace(/^.*\//, "");
    return {
      ...entry,
      displayTitle: title,
    };
  })
  .sort((a, b) => a.displayTitle.localeCompare(b.displayTitle));
---

<Base>
  <div class="handbook-container">
    <!-- Sidebar -->
    <aside class="handbook-sidebar">
      <nav>
        <h2 class="handbook-nav-title">Handbook</h2>
        <ul class="handbook-nav-list">
          {sortedEntries.map((entry) => {
            const isActive = currentSlug === entry.id;
            return (
              <li class="handbook-nav-item">
                <a 
                  href={`/handbook/${entry.id}`}
                  class={isActive ? "handbook-nav-link active" : "handbook-nav-link"}
                >
                  {entry.displayTitle}
                </a>
              </li>
            );
          })}
        </ul>
      </nav>
    </aside>

    <!-- Main content -->
    <main class="handbook-main">
      <div class="prose mx-auto">
        <slot />
      </div>
    </main>
  </div>

  <style>
    .handbook-container {
      display: flex;
      gap: 2rem;
      max-width: none;
    }

    .handbook-sidebar {
      width: 250px;
      flex-shrink: 0;
      position: sticky;
      top: 1rem;
      height: fit-content;
      max-height: calc(100vh - 2rem);
      overflow-y: auto;
      overflow-x: hidden;
      padding-right: 1rem;
    }

    .handbook-sidebar::-webkit-scrollbar {
      width: 6px;
    }

    .handbook-sidebar::-webkit-scrollbar-track {
      background: transparent;
    }

    .handbook-sidebar::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.2);
      border-radius: 3px;
    }

    .handbook-sidebar::-webkit-scrollbar-thumb:hover {
      background: rgba(255, 255, 255, 0.3);
    }

    .handbook-main {
      flex: 1;
      min-width: 0;
      max-width: 65ch;
    }

    .handbook-nav-title {
      font-size: 1.125rem;
      font-weight: 600;
      margin-bottom: 1rem;
      color: var(--color-accent);
    }

    .handbook-nav-list {
      list-style: none;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }

    .handbook-nav-item {
      display: block;
      width: 100%;
    }

    .handbook-nav-link {
      display: block;
      width: 100%;
      padding: 0.5rem 0.75rem;
      font-size: 0.875rem;
      color: #a3a3a3;
      text-decoration: none;
      border-radius: 0.375rem;
      transition: all 0.2s ease;
      word-wrap: break-word;
      line-height: 1.3;
    }

    .handbook-nav-link:hover {
      color: var(--color-text);
      background-color: rgba(255, 255, 255, 0.05);
    }

    .handbook-nav-link.active {
      color: var(--color-text);
      background-color: rgba(255, 255, 255, 0.1);
      font-weight: 500;
    }

    @media (max-width: 768px) {
      .handbook-sidebar {
        display: none;
      }
      
      .handbook-main {
        max-width: none;
      }
    }
  </style>
</Base>
